using System.CodeDom;
using System.CodeDom.Compiler;
using System.IO;
using Microsoft.CSharp;
using UnityEditor;
using UnityEngine;


namespace Bhaptics.SDK2
{
    // https://github.com/ValveSoftware/steamvr_unity_plugin/blob/master/Assets/SteamVR/Input/Editor/SteamVR_Input_Generator.cs
    public class BhapticsEventGenerator
    {
        private const string secretKey = "bhaptics";

        private static bool fileChanged = false;


        public static void CreateEventCsFile(string fileName, string[] eventList)
        {
            CodeCompileUnit compileUnit = new CodeCompileUnit();
            CodeNamespace codeNamespace = new CodeNamespace(typeof(BhapticsLibrary).Namespace);
            codeNamespace.Imports.Add(new CodeNamespaceImport("System"));
            codeNamespace.Imports.Add(new CodeNamespaceImport("UnityEngine"));
            compileUnit.Namespaces.Add(codeNamespace);


            CodeTypeDeclaration setClass = new CodeTypeDeclaration(fileName);
            setClass.Attributes = MemberAttributes.Public;
            codeNamespace.Types.Add(setClass);

            foreach (var s in eventList)
            {
                CodeMemberField field = new CodeMemberField(typeof(string), s.Replace("-", "_").Replace(".", "_").ToUpper());
                field.Attributes = MemberAttributes.Public | MemberAttributes.Const;
                field.InitExpression = new CodePrimitiveExpression(s);

                setClass.Members.Add(field);
            }

            string folderPath = Path.Combine(BhapticsSDK2.GetScriptPath(), "AutoGenerated");

            Debug.LogFormat("{0}", folderPath);

            string fullSourceFilePath = Path.Combine(folderPath, setClass.Name + ".cs");

            if (Directory.Exists(folderPath) == false)
            {
                Directory.CreateDirectory(folderPath);

            }

            CreateFile(fullSourceFilePath, compileUnit);
        }

        private static void CreateFile(string fullPath, CodeCompileUnit compileUnit)
        {
            // Generate the code with the C# code provider.
            CSharpCodeProvider provider = new CSharpCodeProvider();

            // Build the output file name.
            string fullSourceFilePath = fullPath;
            Debug.Log("[bHaptics] Success App Setup\nWriting class to: " + fullSourceFilePath);

            string path = BhapticsSDK2.GetScriptPath();

            string priorMD5 = null;
            FileInfo file = new FileInfo(fullSourceFilePath);
            if (file.Exists)
            {
                file.IsReadOnly = false;
                priorMD5 = GetBadMD5HashFromFile(fullSourceFilePath);
            }

            // Create a TextWriter to a StreamWriter to the output file.
            using (StreamWriter sw = new StreamWriter(fullSourceFilePath, false))
            {
                IndentedTextWriter tw = new IndentedTextWriter(sw, "    ");

                // Generate source code using the code provider.
                provider.GenerateCodeFromCompileUnit(compileUnit, tw,
                    new CodeGeneratorOptions() { BracingStyle = "C" });

                // Close the output file.
                tw.Close();

                string newMD5 = GetBadMD5HashFromFile(fullSourceFilePath);

                if (priorMD5 != newMD5)
                    fileChanged = true;
            }

            if (fileChanged)
            {
                AssetDatabase.Refresh();
                Debug.Log("[bHaptics] class created at: " + fullSourceFilePath);
            }
        }

        public static string GetBadMD5HashFromFile(string filePath)
        {
            if (File.Exists(filePath) == false)
            {
                return null;
            }

            string data = File.ReadAllText(filePath);
            
            return GetBadMD5Hash(data + secretKey);
        }

        public static string GetBadMD5Hash(string usedString)
        {
            byte[] bytes = System.Text.Encoding.UTF8.GetBytes(usedString + secretKey);

            return GetBadMD5Hash(bytes);
        }

        public static string GetBadMD5Hash(byte[] bytes)
        {
            System.Security.Cryptography.MD5CryptoServiceProvider md5 = new System.Security.Cryptography.MD5CryptoServiceProvider();
            byte[] hash = md5.ComputeHash(bytes);

            System.Text.StringBuilder sb = new System.Text.StringBuilder();

            for (int i = 0; i < hash.Length; i++)
            {
                sb.Append(hash[i].ToString("x2"));
            }

            return sb.ToString();
        }
    }
}